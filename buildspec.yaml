version: 0.2

env:
  variables:
    # Set environment variables with your actual values
    S3_BUCKET_NAME: "pipeline-creation-bucket"  # Your S3 bucket for packaging Lambda code
    REGION: "ap-south-1"                        # The AWS region to deploy in
    STACK_NAME: "poc-stack"                     # Your CloudFormation stack name
    IAM_ROLE_ARN: "arn:aws:iam::913524921936:role/poc-stack-cloudformation-role"  # Your IAM execution role ARN

phases:
  install:
    runtime-versions:
      python: 3.9  # Specify the Python runtime
    commands:
      # Install AWS SAM CLI
      - echo Installing AWS SAM CLI...
      - pip install aws-sam-cli
      - echo AWS SAM CLI installed successfully
      
  pre_build:
    commands:
      # Validate the SAM template before packaging
      - echo Validating SAM template...
      - sam validate
      
  build:
    commands:
      # Package the Lambda function using SAM
      - echo Packaging Lambda function...
      - sam package \
          --output-template-file packaged-template.yaml \
          --s3-bucket $S3_BUCKET_NAME \
          --region $REGION
          
      # Check if the packaging step succeeded
      - if [ $? -ne 0 ]; then echo "SAM package failed"; exit 1; fi

  post_build:
    commands:
      # Deploy the application using SAM
      - echo Deploying Lambda function...
      - sam deploy \
          --template-file packaged-template.yaml \
          --stack-name $STACK_NAME \
          --capabilities CAPABILITY_IAM \
          --region $REGION \
          --role-arn $IAM_ROLE_ARN
          
      # Check if the deployment step succeeded
      - if [ $? -ne 0 ]; then echo "SAM deploy failed"; exit 1; fi

artifacts:
  files:
    - packaged-template.yaml  # This file contains the packaged CloudFormation template

  discard-paths: yes

cache:
  paths:
    - /root/.cache/pip/**/*
